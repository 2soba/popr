version: 2.1

jobs:

  build:
    docker:
      - image: redisfab/rmbuilder:6.0.7-x64-centos7

    steps:
      - checkout

      - run: 
          name: Checkout submodules
          command: git submodule update --init --recursive

#      - run:
#          name: Install prerequisites
#          command: |
#              yum update -y
#              yum install -y software-properties-common git clang llvm make cmake awscl gcc gcc-c++ epel-release
#              yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm

      - run:
          name: Setup automation and install dependencies
          command: |
            (mkdir -p deps; cd deps; git clone https://github.com/RedisLabsModules/readies.git)
            PIP=1 FORCE=1 ./deps/readies/bin/getpy2
            ./system-setup.py

      - run:
          name: Install Redis
          command: ./deps/readies/bin/getredis -v 6 

      - run:
          name: Install Rust
          command: |
             curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rust.sh
             sh rust.sh -y
             echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
             source $HOME/.cargo/env
             rustc --version
             cargo --version
             rustup --version

      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run:
          name: Check formatting
          command: |
            source $HOME/.cargo/env
            rustfmt --version
            cargo fmt -- --check

      - run:
          name: Build debug
          command: |
            source $HOME/.cargo/env
            cargo build --all --all-targets
            mv target/debug/librejson.so target/debug/rejson.so

      - run:
          name: Run all tests
          command: |
             source $HOME/.cargo/env
             cargo test --features test --all
             python2 ./test/pytest/test.py

      - run:
          name: Build release
          command: |
            source $HOME/.cargo/env
            cargo build --all --all-targets --release
            mv target/release/librejson.so target/release/rejson.so

      - run:
          name: Persist Artifacts
          command: |
            mkdir -p workspace/build
            cp target/release/$MODULE_ARTIFACT workspace/
            cp ramp.yml workspace/

      - persist_to_workspace:
          root: workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

      - save_cache:
          key: v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"

  package_branch:
    docker:
      - image: redisfab/rmbuilder:6.0.7-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  package_release:
    docker:
      - image: redisfab/rmbuilder:6.0.7-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip
            /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  deploy_branch:
    docker:
      - image: redisfab/rmbuilder:6.0.7-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: redisfab/rmbuilder:6.0.7-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip"


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-master-and-version-tags: &on-master-and-version-tags
  filters:
    branches:
      only:
        - master
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          <<: *on-any-branch
      - package_branch:
          <<: *on-any-branch
          #@ <<: *on-master
          requires:
            - build
      - package_release:
          <<: *on-version-tags
          requires:
            - build
      - deploy_branch:
          <<: *on-any-branch
          #@ <<: *on-master
          requires:
            - package_branch
      - deploy_release:
          <<: *on-version-tags
          requires:
            - package_release
