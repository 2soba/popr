version: 2.1

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup_executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://get.docker.com)
      - setup_remote_docker
#      - setup_remote_docker:
#          docker_layer_caching: true

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            ./deps/readies/bin/getpy3

  platforms_build_steps:
    parameters:
      platform:
        type: string
    steps:
      - setup_executor
      - checkout
      - run:
          name: Checkout submodules
          command: |
            git submodule update --init --recursive
      - setup-automation
      - run:
          name: Build for platform
          command: |
            cd build/platforms
            make build OSNICK=<<parameters.platform>> ARTIFACTS=0 TEST=1 SHOW=1
      - early_return_for_forked_pull_requests
      - run:
          name: Build for platform (publish)
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/platforms
            make publish OSNICK=<<parameters.platform>> OFFICIAL=0 SHOW=1 VERBOSE=1
#      - persist_to_workspace:
#          root: bin/artifacts
#          paths:
#            - 'snapshots/*.zip'
#            - 'snapshots/*.tgz'
#            - '*.zip'
#            - '*.tgz'

jobs:
  build:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-centos7
    steps:
      - checkout
      - run: 
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Setup automation and install dependencies
          command: |
            ./deps/readies/bin/getpy3
            ./system-setup.py
            source $HOME/.cargo/env
            rustc --version
            cargo --version
            rustup --version
      - run:
          name: Install Redis
          command: bash -l -c "./deps/readies/bin/getredis -v 6 --force"
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: Check formatting
          command: bash -l -c "make lint"
      - run:
          name: Build debug
          command: bash -l -c "make build DEBUG=1"
      - run:
          name: Build release
          command: bash -l -c make
      - run:
          name: Run all tests
          command: bash -l -c "make pytest"
      - save_cache:
          key: v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
      - early_return_for_forked_pull_requests
      - run:
          name: Persist Artifacts
          command: |
            mkdir -p workspace/build
            cp target/release/$MODULE_ARTIFACT workspace/
            cp ramp.yml workspace/
      - persist_to_workspace:
          root: workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

  platforms_build:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:buster
    steps:
      - platforms_build_steps:
          platform: <<parameters.platform>>

  package_branch:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            python3 -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  package_release:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: |
            python3 -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: |
            python3 -m RAMP.ramp pack -m /workspace/ramp.yml -o /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  deploy_branch:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip"

  release_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_TAG VERBOSE=1 TEST=release ./tests/qa/run

  nightly_automation:
    docker:
      - image: redisfab/rmbuilder:6.2.1-x64-buster
    steps:
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=$CIRCLE_BRANCH VERBOSE=1 TEST=nightly QUICK=1 ./tests/qa/run


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          <<: *not-on-integ-branch
      - platforms_build:
          <<: *on-integ-and-version-tags
          matrix:
            parameters:
              platform: [focal, bionic, xenial, centos7]
      - package_branch:
          <<: *on-integ-branch
          requires:
            - build
      - package_release:
          <<: *on-version-tags
          requires:
            - build
      - deploy_branch:
          context: common
          <<: *on-integ-branch
          requires:
            - package_branch
      - deploy_release:
          context: common
          <<: *on-version-tags
          requires:
            - package_release
      - release_automation:
          <<: *on-version-tags
          requires:
            - deploy_release

  nightly:
    triggers:
      - schedule:
          cron: "07 20 * * *"
          filters:
            branches:
              only: master
    jobs:
      - nightly_automation
