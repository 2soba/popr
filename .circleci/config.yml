version: 2.1

jobs:

  build:
    docker:
      - image: centos:7

    steps:
      - checkout     
      
      - run:
          name: Install prerequisites
          command: yum install -y software-properties-common git clang llvm cmake awscl
          
      - run:
          name: Install Python
          command: |
             curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
             python get-pip.py
             pip install 'ramp-packer==1.9.0'
             
      - run:
          name: Install Rust
          command: |
             curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rust.sh
             python get-pip.py
             sh rust.sh -y
             echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
             
      - run: 
          name: Update git submodule
          command: |
             git submodule sync
             git submodule update --init 
      
      - run:
          name: Version information
          command: |
             source $HOME/.cargo/env
             rustc --version
             cargo --version
             rustup --version

      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run:
          name: Check formatting
          command: |
            source $HOME/.cargo/env
            rustfmt --version
            cargo fmt -- --check

      - run:
          name: Build debug
          command: |
            source $HOME/.cargo/env
            cargo build --all --all-targets
            mv target/debug/librejson.so target/debug/rejson.so

      - run:
          name: Run all tests
          command: |
             source $HOME/.cargo/env
             cargo test --features test --all
             pip install -r ./test/pytest/requirements.txt
             python ./test/pytest/test.py

      - run:
          name: Build release
          command: |
            source $HOME/.cargo/env
            cargo build --all --all-targets --release
            mv target/release/librejson.so target/release/rejson.so

      - run:
          name: Persist Artifacts
          command: >-
            mkdir -p workspace/build && cp target/release/$MODULE_ARTIFACT workspace/ &&
            cp ramp.yml workspace/

      - persist_to_workspace:
          root: workspace
          paths:
            - '*.so'
            - ramp.yml
            - build

      - save_cache:
          key: v2-dependencies-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"

  package_branch:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.$CIRCLE_BRANCH.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  package_release:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.{semantic_version}.zip
            /workspace/$MODULE_ARTIFACT
      - run:
          name: Package
          command: >-
            ramp pack -m /workspace/ramp.yml -o
            /workspace/build/$PACKAGE_NAME.{os}-{architecture}.latest.zip
            /workspace/$MODULE_ARTIFACT
      - persist_to_workspace:
          root: /workspace
          paths:
            - build
      - store_artifacts:
          path: /workspace/build

  deploy_branch:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  deploy_release:
    docker:
      - image: 'redislabsmodules/rmbuilder:latest'
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp /workspace/build/ s3://redismodules/$PACKAGE_NAME/ --acl
            public-read --recursive --exclude "*" --include "*.zip"

  deploy_docs:
    docker:
      - image: 'python:buster'
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip wget
            cd ..; curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"; unzip awscliv2.zip;./aws/install
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r docs/requirements.txt
      - run:
          name: Build docs
          command: mkdocs build
      - run:
          name: Deploy Docs to S3
          command: |
            aws s3 cp site s3://oss.redislabs.com/$WEBSITE_FOLDER/ --acl public-read --recursive

workflows:
  version: 2
  build_and_package:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - package_branch:
          requires:
            - build
          filters:
            branches:
              only: master
      - package_release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: '/^v[0-9].*/'
      - deploy_branch:
          requires:
            - package_branch
      - deploy_release:
          filters:
            tags:
              only: '/^v[0-9].*/'
          requires:
            - package_release
      # TODO: deploy_docs should run only when 'docs/' or 'mkdocs.yml' change
      - deploy_docs:
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/
